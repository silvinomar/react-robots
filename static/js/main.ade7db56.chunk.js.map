{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"0OAceA,G,YAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,yBAAKC,UAAU,8EACX,yBAAKC,IAAG,+BAA0BJ,EAAKE,EAA/B,iBAAkDG,IAAI,uBAC9D,6BACI,wBAAIF,UAAU,4CAA4CH,GAC1D,uBAAGG,UAAU,2BAA2BF,OCSzCK,EAdE,SAAC,GAAkB,IAAfC,EAAc,EAAdA,OACjB,OACI,yBAAKJ,UAAU,gEAGXI,EAAOC,KAAI,SAACC,EAAKC,GACb,OAAO,kBAAC,EAAD,CAAMC,IAAKJ,EAAOG,GAAGR,GAAIA,GAAIK,EAAOG,GAAGR,GAAIF,KAAMO,EAAOG,GAAGV,KAAMC,MAAOM,EAAOG,GAAGT,aCC1FW,EARG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACI,yBAAKX,UAAU,QACX,2BAAOY,KAAK,OAAMC,YAAY,gBAAgBC,SAAUH,EAAcX,UAAU,2BCK7Ee,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAE,UAAa,SAAU,OAAU,OAAQ,aAAa,sBAAsB,OAAU,sBAAuB,MAAS,SAC/HD,EAAME,WCmBJC,E,kDArBX,WAAYH,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACTC,UAAU,GAHC,E,8DAQDC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,yDAEAG,KAAKR,MAAME,a,GAjBHQ,aCsEZC,E,kDA9DX,aAAe,IAAD,8BACV,gBAeJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEf,YAAamB,EAAMC,OAAOC,SAf1C,EAAKX,MAAQ,CACThB,OAAQ,GACRM,YAAa,IAEjBsB,QAAQC,IAAI,eANF,E,gEASO,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAAErB,OAAQkC,OAC3CN,QAAQC,IAAI,uB,+BAOP,MAE2BT,KAAKJ,MAA7BhB,EAFH,EAEGA,OAAQM,EAFX,EAEWA,YAEV6B,EAAiBnC,EAAOoC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASjC,EAAYgC,kBAIzD,OAFAV,QAAQC,IAAI,UAEP7B,EAAOwC,OAIJ,0BAAM5C,UAAU,eACZ,4BAAQA,UAAU,gCACd,wBAAIA,UAAU,0BAAd,eACA,kBAAC,EAAD,CAAWW,aAAca,KAAKI,kBAElC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxB,OAAQmC,OAV3B,8C,GAhCDb,aCIEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLU,QAAQV,MAAMA,EAAMsC,a","file":"static/js/main.ade7db56.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ( {name, email, id} ) => {\r\n    return (\r\n        <div className=\"robot-card bg-success text-white text-center shadow rounded px-3 mx-2 mb-4\">\r\n            <img src={`https://robohash.org/${name+id}?size=185x185`} alt=\"robot avatar photo\"/>\r\n            <div>\r\n                <h2 className=\"mt-3 mb-0 mx-auto font-weight-light lead\">{name}</h2>\r\n                <p className=\"mt-0 font-weight-light \">{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../components/Card';\r\n\r\nconst CardList = ( { robots } ) => {\r\n    return (\r\n        <div className='cardList d-flex flex-wrap justify-content-around bg-dark p-5'>\r\n            { \r\n            \r\n            robots.map((user,i ) => {\r\n                return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n            })\r\n            \r\n            }             \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\n\r\nconst SearchBox = ( {searchField, searchChange}) => {\r\n    return (\r\n        <div className=\"pt-3\">\r\n            <input type=\"text\"placeholder=\"search robots\" onChange={searchChange} className=\"d-block w-75 mx-auto\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ 'overflowY': 'scroll', 'margin': 'auto', 'min-height':'calc(100vh - 178px)','height': 'calc(100vh - 178px)', 'width': '100%'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    // REACT16 dependent\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooooops. That is not good</h1>\r\n        } else {\r\n            return this.props.children\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport './bootstrap.min.css';\r\nimport './Estilos.css';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nclass App extends Component {\r\n    \r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchField: '',\r\n        }\r\n        console.log(\"constructor\");\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users }))\r\n        console.log(\"componentDidMount\");\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchField: event.target.value })\r\n    }\r\n\r\n    render() {\r\n        // destructuring\r\n        const { robots, searchField } = this.state;\r\n\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        console.log(\"render\");\r\n\r\n        if (!robots.length) {\r\n            return <h1>loading...</h1>\r\n        } else {\r\n            return (\r\n                <main className=\"text-center\">\r\n                    <header className=\"pt-3 pb-4 position-relative \">\r\n                        <h1 className=\"font-weight-light mt-2\">Robofriends</h1>\r\n                        <SearchBox searchChange={this.onSearchChange} />\r\n                    </header>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </main>\r\n            )\r\n        }\r\n    }\r\n}\r\n/*\r\nconst App = () => {\r\n    return (\r\n        <main className=\"text-center\">\r\n            <header className=\"py-3\">\r\n                <h1 className=\"font-weight-light mt-2\">Robofriends</h1>\r\n                <SearchBox />\r\n            </header>\r\n            <CardList robots={robots}/>\r\n        </main>\r\n    );\r\n}\r\n*/\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}